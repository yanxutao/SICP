(define example (list 1 2 3 4)) 

(define (list-ref items n)
    (if (= n 0)
        (car items)
        (list-ref (cdr items) (- n 1))))
(define squares (list 1 4 9 16 25))

(define (last-pair l) 
	(if (null? (cdr l))
		(list (car l))
		(last-pair (cdr l))))

(define (reverse l)
    (if (null? (cdr l))
        (car l)
        (cons (reverse (cdr l)) (car l))))

(define (reverse l)
    (if (null? (cdr l))
        (list (car l))
        (append (reverse (cdr l)) (list (car l)))))
        
(define (same-parity-iter result first remain)
    (if (null? remain)
        result
        ((if (= (% first 2) (% (car remain) 2))
            (append result (list (car remain))))
        (same-parity-iter result first (cdr remain)))))
        
(define (same-parity first . remain)
    (same-parity-iter (list first) first remain))
    
(define (% op1 op2)
    (if (< op1 op2)
        op1
        (% (- op1 op2) op2)))           
        
(same-parity 1 2)

(define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence)))))
            
(define (length sequence)
    (accumulate (lambda (x y) (+ 1 y)) 0 sequence))
    
(define (map p sequence)
    (accumulate (lambda (x y) (cons (p x) y)) nil sequence))
    
(define (append seq1 seq2)
    (accumulate cons seq2 seq1))

(define (horner-eval x coefficient-sequence)
    (accumulate (lambda (this-coeff higher-terms) (+ this-coeff (* x higher-terms)))
        0
        coefficient-sequence))
        
(define (count-leaves t)
    (accumulate (map )))
    
(define (split x y)
    ()  ) 
